from collections.abc import Sequence

import pytest
from mcp.server.fastmcp import FastMCP

from zoo_mcp.server import mcp


@pytest.fixture
@pytest.mark.asyncio
async def server() -> FastMCP:
    return mcp


@pytest.mark.asyncio
async def test_text_to_cad(server):
    prompt = "Create a 10x10x10 cube."
    response = await server.call_tool("call_text_to_cad", arguments={"prompt": prompt})
    assert isinstance(response, Sequence | dict)


@pytest.mark.asyncio
async def test_text_to_cad_success(server):
    prompt = "Create a 10x10x10 cube."
    response = await server.call_tool("call_text_to_cad", arguments={"prompt": prompt})
    assert isinstance(response, Sequence | dict)
    assert "/*\nGenerated by Text-to-CAD" in response[1]["result"]


@pytest.mark.asyncio
async def test_text_to_cad_failure(server):
    prompt = "the quick brown fox jumps over the lazy dog"
    response = await server.call_tool("call_text_to_cad", arguments={"prompt": prompt})
    assert isinstance(response, Sequence | dict)
    assert "400 Bad Request" in response[1]["result"]
